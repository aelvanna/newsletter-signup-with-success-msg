@use "variables" as *;
@use "fonts";
@use "mixins";

/* Resets margin and padding for whole page & changes
/* to border-box box-sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: "Roboto Regular", sans-serif;
  font-size: $fs-base;
  color: $blue-700;
  line-height: 1.5;
  background-color: $white;
  min-height: 100vh;

  display: grid;
  grid-template-rows: 1fr auto;
  grid-template-areas: "main" "footer";
  align-items: start; // Prevents grid items from stretching to full height by default.

  @include mixins.breakpoint($breakpoint-tablet) {
    grid-template-rows: auto;
    background-color: $blue-700;
    align-content: center;
    justify-items: center;
    padding: $space-lg;
  }

  // When the body has the success state class, hide the main container
  // and display the success message.
  &.success-state-active {
    .container {
      display: none;
    }

    // Override the default 'display: none' to show the message
    .success-message {
      display: flex;
    }
  }
}

.container {
  width: 100%;
  grid-area: main;

  @include mixins.breakpoint($breakpoint-tablet) {
    display: grid;
    grid-template-columns: 1.1fr 1fr;
    grid-template-areas: "form header";

    max-width: 55rem;
    background-color: $white;
    border-radius: 2rem;
    padding: $space-lg;
    gap: 2rem;
  }
}

h1,
h2 {
  font-family: "Roboto Bold", sans-serif;
  font-size: $fs-xxl;
  color: $color-secondary;
}

.header {
  @include mixins.breakpoint($breakpoint-tablet) {
    grid-area: header;
  }

  &__image {
    display: block; // Prevents extra space below the image
    width: 100%; // Makes the image responsive to the container width
    height: auto;

    @include mixins.breakpoint($breakpoint-tablet) {
      height: 100%;
      object-fit: cover;
      border-radius: $space-md;
      margin-block-end: $space-xs;
    }
  }
}

.form {
  padding: $space-lg;
  &__description {
    margin-block-end: $space-md;

    h1 {
      margin-block-end: $space-xs;
    }

    p {
      max-width: 90%; // Limits paragraph width to match design and improve readability
      margin-block-end: $space-lg;
    }

    p,
    li {
      font-size: $fs-sm;
    }
  }

  &__list {
    list-style: none; // Removes default bullet points

    li {
      display: flex;
      align-items: flex-start; // Aligns icon with the top of the text
      gap: $space-md; // Creates space between the icon and the text
      margin-block-end: 0.75rem; // Space between list items

      &::before {
        content: "";
        display: inline-block;
        width: 1.313rem;
        height: 1.313rem;
        flex-shrink: 0; // Prevents the icon from shrinking if text is long
        background-image: url("../images/icon-list.svg");
        background-size: contain;
        background-repeat: no-repeat;
      }
    }
  }

  &__label {
    display: block; // Makes label take full width, forcing line break
    font-family: "Roboto Bold", sans-serif;
    font-size: $fs-xxs;
    color: $color-secondary;
    margin-block-end: $space-xs;
  }

  &__field {
    width: 100%;
    border-radius: 0.5rem;
    border: 1px solid $grey;
    background-color: transparent;
    padding: $space-md;
    margin-block-end: $space-lg;

    &:hover {
      cursor: pointer;
    }

    &:active,
    &:focus {
      cursor: text;
    }
  }

  &__label-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  &__error-message {
    font-family: "Roboto Bold", sans-serif;
    font-size: $fs-sm;
    color: $color-primary;
  }

  @include mixins.breakpoint($breakpoint-tablet) {
    grid-area: form;
    padding: 0; // Reset padding on desktop, from parent .container
    padding-inline-start: 2rem; // Add padding to the left side
    padding-block: 2rem;
    // Vertically center the form content within column
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
}

/* Error state for the input field */
.form__field.form__field--error {
  border-color: $color-primary;
  background-color: rgba($color-primary, 0.2);
  color: $color-primary;

  &::placeholder {
    color: $color-primary;
  }
}

button {
  font-family: "Roboto Bold", sans-serif;
  font-size: $fs-base;
  width: 100%;
  background-color: $color-secondary;
  color: $white;
  padding: $space-md;
  border-radius: $space-xs;
  border: none;
  transition: background 0.3s ease, box-shadow 0.3s ease;
  // Mixin for users who have reduced motion preferences enabled
  @include mixins.reduced-motion();

  &:hover,
  &:focus-visible {
    // Gradient for active-states. The colors are from the design's illustration.
    background: linear-gradient(to right, #ff527b, #ff6a3a);
    box-shadow: 0 $space-md 2rem rgba($color-primary, 0.5);
    cursor: pointer;
  }

  @include mixins.breakpoint($breakpoint-desktop) {
    font-size: $fs-sm;
  }
}

.success-message {
  // Mobile-first styles: The success message takes up the full screen.
  display: none; // Hidden by default, shown via JS
  flex-direction: column;
  height: 100%; // Fill the available vertical space in the grid cell.
  padding: 9rem 1.5rem 2.5rem; // top, horizontal, bottom padding
  grid-area: main; // Occupy the same grid area as the main container

  &__icon {
    width: 4rem;
    height: 4rem;
    margin-block-end: 2rem;
  }

  h2 {
    margin-block-end: 1.5rem;
    line-height: 1.1;
  }

  p {
    line-height: 1.5;
  }

  &__button {
    // By setting margin-top to auto, we push the button to the bottom
    // of the flex container, taking up all available space.
    margin-top: auto;
  }

  .submitted-email {
    font-family: "Roboto Bold", sans-serif;
  }

  @include mixins.breakpoint($breakpoint-tablet) {
    // On larger screens, it becomes a centered card.
    max-width: 31.25rem; // 500px
    height: auto; // Let content define height
    padding: 3rem 4rem;
    border-radius: 2rem;
    background-color: $white;

    &__button {
      margin-top: 2rem; // A fixed margin is better for the card layout.
    }
  }
}

.attribution {
  font-size: $fs-xxs;
  text-align: center;
  grid-area: footer;

  a {
    color: $color-link;
  }

  @include mixins.breakpoint($breakpoint-tablet) {
    color: $white;
    padding: 1rem 0;

    a {
      color: $grey;
    }
  }
}
